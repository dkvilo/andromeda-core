
// let is local scope

let x: @i8 := 3;
let y: @i8 := 5;
let z: @f32 := 33.0;

let name: @str := "David";
let grate: @char := 'A';
let is_valid: @bool := true;

extern get_user :: (name: @str, age: @i8) -> @i8 {
  return age * 2;
};

// Strict with constructor 
extern typedef struct Person :: <name: @str, age: @i8> -> @(self) {
  self(name, age); // bind arg to the property automatically (based on param type)
};

extern get_age :: (ptr& @Person) -> @i8 {
  return ptr->age;
}

extern dereference :: (ptr& @Person) -> @Person {
  @(Person)[ptr]->age = 22;
  return ptr;
}

// Actor interface for the Person, Entity and User type
#Actor :: [ptr&: @Person, @Entity, @User] {
  extern act :: (ptr: @(self));
};

